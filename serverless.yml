service: api-studentphong
app: student-phong
org: longtam20015
frameworkVersion: '2'

provider:
  name: aws
  runtime: java8
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": [ "roleTable", "Arn" ] }
        - { "Fn::GetAtt": [ "userTable", "Arn" ] }
        - { "Fn::GetAtt": [ "studentTable", "Arn" ] }
        - { "Fn::GetAtt": [ "teacherTable", "Arn" ] }
        - { "Fn::GetAtt": [ "subjectTable", "Arn" ] }
        - { "Fn::GetAtt": [ "groupTable", "Arn" ] }
        - { "Fn::GetAtt": [ "scoreTable", "Arn" ] }
        - { "Fn::GetAtt": [ "examTable", "Arn" ] }

plugins:
  - serverless-offline
package:
  artifact: build/distributions/hello.zip
#Lambda Role

functions:
  createRole:
    handler: com.serverless.handler.RoleHandler.CreateRoleHandler
    events:
      - http:
          path: /role
          method: post
          cors: true

  listRole:
    handler: com.serverless.handler.RoleHandler.ListRoleHandler
    events:
      - http:
          path: /role
          method: get
          cors: true
  #Lambda Role

  #Lambda User
  createUser:
    handler: com.serverless.handler.UserHandler.CreateUserHandler
    events:
      - http:
          path: /user
          method: post
          cors: true

  updateUser:
    handler: com.serverless.handler.UserHandler.UpdateUserHandler
    events:
      - http:
          path: /user
          method: put
          cors: true

  getUserByToken:
    handler: com.serverless.handler.UserHandler.GetUserByTokenHandler
    events:
      - http:
          path: /user/token
          method: get
          cors: true

  listUser:
    handler: com.serverless.handler.UserHandler.ListUserHandler
    events:
      - http:
          path: /user
          method: get
          cors: true

  getUserByUsername:
    handler: com.serverless.handler.UserHandler.GetUserHandler
    events:
      - http:
          path: /user/{id}
          method: get
          cors: true

  loginUser:
    handler: com.serverless.handler.UserHandler.LoginUserHandler
    events:
      - http:
          path: /user/login
          method: post
          cors: true
  #Lambda User

  #Lambda Student
  createStudent:
    handler: com.serverless.handler.StudentHandler.CreateStudentHandler
    events:
      - http:
          path: /student
          method: post
          cors: true
  listStudent:
    handler: com.serverless.handler.StudentHandler.ListStudentHandler
    events:
      - http:
          path: /student
          method: get
          cors: true

  getStudent:
    handler: com.serverless.handler.StudentHandler.GetStudentHandler
    events:
      - http:
          path: /student/{id}
          method: get
          cors: true

  getStudentTokenHandler:
    handler: com.serverless.handler.StudentHandler.GetStudentTokenHandler
    events:
      - http:
          path: /student/token
          method: get
          cors: true

  updateStudent:
    handler: com.serverless.handler.StudentHandler.UpdateStudentHandler
    events:
      - http:
          path: /student
          method: put
          cors: true
  deleteStudentHandler:
    handler: com.serverless.handler.StudentHandler.DeleteStudentHandler
    events:
      - http:
          path: /student/{id}
          method: delete
          cors: true
  #Lambda Student
  #Lambda Teacher
  createTeacher:
    handler: com.serverless.handler.TeacherHandler.CreateTeacherHandler
    events:
      - http:
          path: /teacher
          method: post
          cors: true
  listTeacher:
    handler: com.serverless.handler.TeacherHandler.ListTeacherHandler
    events:
      - http:
          path: /teacher
          method: get
          cors: true
  getTeacher:
    handler: com.serverless.handler.TeacherHandler.GetTeacherHandler
    events:
      - http:
          path: /teacher/{id}
          method: get
          cors: true

  getTeacherTokenHandler:
    handler: com.serverless.handler.TeacherHandler.GetTeacherTokenHandler
    events:
      - http:
          path: /teacher/token
          method: get
          cors: true

  deleteTeacherHandler:
    handler: com.serverless.handler.TeacherHandler.DeleteTeacherHandler
    events:
      - http:
          path: /teacher/{id}
          method: delete
          cors: true

  updateTeacher:
    handler: com.serverless.handler.TeacherHandler.UpdateTeacherHandler
    events:
      - http:
          path: /teacher
          method: put
          cors: true
  #Lambda Teacher

  #Lambda Subject
  createSubject:
    handler: com.serverless.handler.SubjectHandler.CreateSubjectHandler
    events:
      - http:
          path: /subject
          method: post
          cors: true

  updateSubject:
    handler: com.serverless.handler.SubjectHandler.UpdateSubjectHandler
    events:
      - http:
          path: /subject
          method: put
          cors: true

  deleteSubject:
    handler: com.serverless.handler.SubjectHandler.DeleteSubjectHandler
    events:
      - http:
          path: /subject/{id}
          method: delete
          cors: true

  listSubjects:
    handler: com.serverless.handler.SubjectHandler.ListSubjectHandler
    events:
      - http:
          path: /subject
          method: get
          cors: true

  #Lambda Subject
  #Lambda Group
  createGroup:
    handler: com.serverless.handler.GroupHandler.CreateGroupHandler
    events:
      - http:
          path: /group
          method: post
          cors: true

  getGroup:
    handler: com.serverless.handler.GroupHandler.GetGroupHandler
    events:
      - http:
          path: /group/{id}
          method: get
          cors: true

  getGroupByToken:
    handler: com.serverless.handler.GroupHandler.GetGroupByTokenHandler
    events:
      - http:
          path: /group/token
          method: get
          cors: true

  listGroup:
    handler: com.serverless.handler.GroupHandler.ListGroupHandler
    events:
      - http:
          path: /group
          method: get
          cors: true
  listStudentGroups:
    handler: com.serverless.handler.GroupHandler.ListGroupStudentHandler
    events:
      - http:
          path: /liststudentgroups
          method: get
          cors: true
  listTeacherGroups:
    handler: com.serverless.handler.GroupHandler.ListGroupTeacherHandler
    events:
      - http:
          path: /listteachergroups
          method: get
          cors: true
  listTeacherGroupBySubject:
    handler: com.serverless.handler.GroupHandler.ListGroupTeacherByIdHandler
    events:
      - http:
          path: /listteachergroups/{id}
          method: get
          cors: true
  #Lambda Group
  #Lambda Score
  createScore:
    handler: com.serverless.handler.ScoreHandler.CreateScoreHandler
    events:
      - http:
          path: /score
          method: post
          cors: true
  listScore:
    handler: com.serverless.handler.ScoreHandler.ListScoreHandler
    events:
      - http:
          path: /score
          method: get
          cors: true
  getScore:
    handler: com.serverless.handler.ScoreHandler.GetScoreHandler
    events:
      - http:
          path: /score/{id}
          method: get
          cors: true
  updateScore:
    handler: com.serverless.handler.ScoreHandler.UpdateScoreHandler
    events:
      - http:
          path: /score
          method: put
          cors: true
  deleteScoreHandler:
    handler: com.serverless.handler.ScoreHandler.DeleteScoreHandler
    events:
      - http:
          path: /score/{id}
          method: delete
          cors: true
  #Lambda Score
  #Lambda Exam
  createExam:
    handler: com.serverless.handler.ExamHandler.CreateExamHandler
    events:
      - http:
          path: /exam
          method: post
          cors: true
  listExam:
    handler: com.serverless.handler.ExamHandler.ListExamHandler
    events:
      - http:
          path: /exam
          method: get
          cors: true
  getExam:
    handler: com.serverless.handler.ExamHandler.GetExamHandler
    events:
      - http:
          path: /exam/{id}
          method: get
          cors: true
  updateExam:
    handler: com.serverless.handler.ExamHandler.UpdateExamHandler
    events:
      - http:
          path: /exam
          method: put
          cors: true
  deleteExamHandler:
    handler: com.serverless.handler.ExamHandler.DeleteExamHandler
    events:
      - http:
          path: /exam/{id}
          method: delete
          cors: true
  #Lambda Exam

  #Lambda Upload S3
  createS3:
    handler: com.serverless.handler.S3Handler.CreateS3Handler
    events:
      - http:
          path: /upload
          method: post
          cors: true

resources:
  Resources:
    roleTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: role_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    studentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: student_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    teacherTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: teacher_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    subjectTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: subject_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    groupTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: group_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    scoreTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: score_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    examTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: exam_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1